
1. Menu

Menu is the most basic flow type.

Structure e.g.:


"index": [
  "menu",
  [
    {
      "message": "Please select an option:"
    },
    [
      "pizza",
      "Pizza"
    ],
    [
      "coconut",
      "Coconut"
    ],
    [ "loop", 
      "Loop for Fun!"
    ],
    [ "url", 
      "Twitter URL"
    ]
  ]
]

i.e. a uri: [ "menu", [ menu_data ] ] response pair, except the second value is itself an array.

The first element of menu_data is a hash menu_metadata which contains metadata about the menu. The rest are two element arrays, the first is the pointer to the target URI, the second the message to be displayed.

2. URL

Structure:

"url": [
  "url",
  {
    "location": "http://twitter.com/statuses/show/123.json",
    "message_prefix": "",
    "message_suffix": ""
  }
]

i.e. a uri: [ "url", { url_data } ] response pair, the second value is itself a hash.

The hash has three defined parameters. Location is the location to fetch the data from, message_prefix and message_suffix can be added on to the response from the location.

3. Redirect

Structure:
"loop": [
  "redirect",
  "index"
],

i.e. a uri: ["redirect", location] where location is a internal uri in the JSON. If the URI itself refers to other special structures (like for e.g. URL) they are evaluated as expected.

4. Message
Structure:
"coconut": [
  "message",
  "Ordering coconut..."
],

i.e. a uri: ["message", message] where message is a string. The message is displayed back and evaluation is terminated.

5. Case
Structure:
"case": [
  "case",
  {
    "left": 
    { 
      "uri": "db" 
    },
    "right": 
    { 
      "value": 42 
    },
    "comparison": "number-less-than",
    "true": "case/enough",
    "false": "case/badbad",
    "error": "case/error"
  }
]

i.e. a uri: ["case", { case_options }] structure.

where case_options _must include_ all of:
left: The left value or uri to compare
right: The right value or uri to compare
comparison: One of:
  number->
  number=>=
  number-<
  number-<=
  number-=
  number-!=
  string-=
  string-!=
Each comparison is done with left <comparison operator> right.
true: Branched to in case comparison is true.
false: Branched to in case comparison is false.

left and right can take a hash, which has a single key value pair,
either of "uri" which fully evaluates a uri or "value" which compares with a value.

Similarly, true and false are as expected fully evaluated.

6. Database
Structure:
"db": [
  "database",
  {
    "connection": 
    {
      "adapter": "sqlite3",
      "database": "./test/test.db"
    },
    "query": "SELECT value FROM test WHERE id = 2;",
    "organize": "single"
  }
]

i.e. uri: [ "database", { database_options }]
database_options has another hash inside this called connection. connection's keys are dependent on the adapter. Please see ActiveRecord's documentation on the correct keys for the DB of your choice. We're use Sqlite3 above.

query: is the query to run.
organize: is how you want the result to be returned. 
  "single": works best if there's only one value to be returned.
  "list": works best if there are more than one values to be returned. The values are returned in a comma-separated list.


